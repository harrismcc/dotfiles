# Fig pre block. Keep at the top of this file.
[[ -f "$HOME/.fig/shell/zshrc.pre.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.pre.zsh"
# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# From OLD .zshrc
# NVM
export NVM_DIR=~/.nvm
source $(brew --prefix nvm)/nvm.sh

##############
# Git Prompt #
##############

if [ "$ZSH_VERSION" != "" ]
then
  source "/Users/harris/zsh-git-prompt/zshrc.sh"
  PROMPT='%B%m%~%b$(git_super_status) %# '
fi


export GITHUB_USERNAME=harrismcc
export GITHUB_EMAIL=harris@transcend.io
export TRANSCEND_DIR=/Users/harris/transcend

# Load zshenv from transcend-io/main
if [[ -f $TRANSCEND_DIR/main/.devcontainer/files/etc/zsh/zshenv ]]; then
  source $TRANSCEND_DIR/main/.devcontainer/files/etc/zsh/zshenv
fi

# Load zshrc from transcend-io/main
if [[ -f $TRANSCEND_DIR/main/.devcontainer/files/etc/zsh/zshrc ]]; then
  source $TRANSCEND_DIR/main/.devcontainer/files/etc/zsh/zshrc
fi


# add Pulumi to the PATH
export PATH=$PATH:$HOME/.pulumi/bin

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/harris/Downloads/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/harris/Downloads/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/harris/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/harris/Downloads/google-cloud-sdk/completion.zsh.inc'; fi


# Starship
eval "$(starship init zsh)"

export PATH=/Users/harris/.local/bin:$PATH

# Fig post block. Keep at the bottom of this file.
[[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"

# Set node ram options
export NODE_OPTIONS="--max_old_space_size=8192"
alias s="NODE_OPTIONS=\"--max_old_space_size=8192\" yarn node local_dev/start.js"

# Alias to kill the process using a port
alias killport='lsof -ti :$1 | xargs kill'

# Alias to create a new zsh shell in rosetta
alias rosettazsh='arch -x86_64 /bin/zsh'

# Alias to run a program in rosetta
alias rosetta='arch -x86_64 $1'

# Alias to kill all zellij sessions
alias zclean='zellij kill-all-sessions -y && zellij delete-all-sessions -y'

# Strange fix needed to get pre-commit checks to work
export YARN_IGNORE_NODE=1


# grit
export GRIT_INSTALL="$HOME/.grit"
export PATH="$GRIT_INSTALL/bin:$PATH"

# grit
export GRIT_INSTALL="$HOME/.grit"
export PATH="$GRIT_INSTALL/bin:$PATH"

# fnm
FNM_PATH="/Users/harris/Library/Application Support/fnm"
if [ -d "$FNM_PATH" ]; then
  export PATH="/Users/harris/Library/Application Support/fnm:$PATH"
  eval "`fnm env`"
fi
eval "$(fnm env --use-on-cd --shell zsh)"

# Add Docker to path
export PATH="$PATH:/Applications/Docker.app/Contents/Resources/bin/"
export PATH="/opt/homebrew/anaconda3/bin:$PATH"

# Add python stuff to path
export PATH="/Users/harris/.local/bin:$PATH"

# pnpm
export PNPM_HOME="/Users/harris/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# Disable docker hints
export DOCKER_CLI_HINTS=falsexport DOCKER_CLI_HINTS=falsee

# Helper command to run a command in the dev container
dexec() {
  container_id=$(docker ps -q --filter "name=Main_Codespace")
  if [ -z "$container_id" ]; then
    echo "Error: Container 'Main_Codespace' not found." >&2
    echo "Attempting to start the container..." >&2
    # Start the container (replace with your actual start command if different)
    if ! docker start Main_Codespace; then
      echo "Failed to start the container." >&2
      return 1  # Exit with an error code if starting fails
    fi
    # Re-check for container ID after (attempted) start
    container_id=$(docker ps -q --filter "name=Main_Codespace")
      if [ -z "$container_id" ]; then
          echo "Error: Container still not found after start attempt." >&2
          return 1
      fi
  fi
  docker exec -it "$container_id" bash -c "cd /workspaces/main && $(printf '%q ' "$@")"
}

# bun completions
[ -s "/Users/harris/.bun/_bun" ] && source "/Users/harris/.bun/_bun"
export PATH="/opt/homebrew/opt/postgresql@15/bin:$PATH"

# Added by Windsurf
export PATH="/Users/harris/.codeium/windsurf/bin:$PATH"

# NPM global
export PATH=$PATH:~/.local/share/fnm/node-versions/v20.16.0/installation/bin

# Enable prompt caching for claude code
export DISABLE_PROMPT_CACHING=0

# Alias for git branches that are gone from remote
alias gone="!c() { git branch -vv | grep ': gone]' | awk '{print $1}'; }; c"

#
# Usage:
#   wcd <branch-name>              # create or cd to worktree
#   wcd -D <branch-name>           # delete the worktree
#

# Added by LM Studio CLI (lms)
export PATH="$PATH:/Users/harris/.lmstudio/bin"
# End of LM Studio CLI section


alias ghretry="bun run ~/Documents/rerun/index.ts"

# Nix
if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
  . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi
# End Nix

export EDITOR=nvim


# opencode
export PATH=/Users/harris/.opencode/bin:$PATH
